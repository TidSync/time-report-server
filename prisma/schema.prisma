generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email       String  @unique
  name        String
  photo       String?
  password    String
  is_verified Boolean @default(false)
  is_deleted  Boolean @default(false)

  projects Project[] @relation("ProjectToUser")
  teams    Team[]    @relation("TeamToUser")

  organisation_user OrganisationUser[]
  timesheets        Timesheet[]
  user_token        UserToken[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model UserToken {
  id      String @id @default(uuid())
  user_id String

  token      String    @unique
  token_type TokenType
  expires_at DateTime  @default(dbgenerated("(now() + '7 days'::interval)"))

  user User @relation(fields: [user_id], references: [id])

  @@map("user_tokens")
}

model OrganisationUser {
  user_id         String
  organisation_id String

  invitation_status InvitationStatus @default(PENDING)
  user_role         UserRole         @default(USER)

  organisation Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [user_id], references: [id])

  @@unique([user_id, organisation_id])
  @@map("organisation_users")
}

model OrganisationAddress {
  id              String @id @default(uuid())
  organisation_id String

  line1       String
  line2       String?
  city        String
  country     String
  postal_code String
  email       String
  is_default  Boolean @default(false)

  organisation Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("organisation_addresses")
}

model Organisation {
  id String @id @default(uuid())

  name                    String
  photo                   String?
  customer_billing_id     String?
  subscription_billing_id String?
  subscription_ends_at    DateTime?
  subscription_status     SubscriptionStatus?

  organisation_user OrganisationUser[]
  projects          Project[]
  teams             Team[]
  addresses         OrganisationAddress[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("organisations")
}

model Team {
  id              String @id @default(uuid())
  organisation_id String

  name  String
  photo String?
  color String

  organisation Organisation @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  users        User[]       @relation("TeamToUser")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("teams")
}

model Project {
  id              String @id @default(uuid())
  organisation_id String

  name        String
  photo       String?
  description String
  color       String

  organisation Organisation      @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  users        User[]            @relation("ProjectToUser")
  sub_projects ProjectCategory[]
  timesheet    Timesheet[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("projects")
}

model ProjectCategory {
  id         String @id @default(uuid())
  project_id String

  name        String
  description String?

  project    Project     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  timesheets Timesheet[]

  @@map("project_categories")
}

model Timesheet {
  id                  String  @id @default(uuid())
  user_id             String
  project_id          String
  project_category_id String?

  description    String?
  hours          Int?
  link           String?
  minutes        Int?
  target_date    DateTime
  status         TimesheetStatus @default(PENDING)
  status_comment String?

  projectCategory ProjectCategory? @relation(fields: [project_category_id], references: [id])
  project         Project          @relation(fields: [project_id], references: [id])
  user            User             @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("timesheets")
}

enum TokenType {
  VERIFY_EMAIL
  RESET_PASSWORD
}

enum InvitationStatus {
  PENDING
  ACCEPTED
}

enum UserRole {
  USER
  PROJECT_MANAGER
  ADMIN
  OWNER
}

enum TimesheetStatus {
  APPROVED
  PENDING
  CHANGE_REQUESTED
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}
